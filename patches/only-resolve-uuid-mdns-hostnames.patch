diff --git a/p2p/base/p2p_transport_channel.cc b/p2p/base/p2p_transport_channel.cc
index 8c7d91aeac..9b0a6f455a 100644
--- a/p2p/base/p2p_transport_channel.cc
+++ b/p2p/base/p2p_transport_channel.cc
@@ -19,6 +19,7 @@
 #include <functional>
 #include <memory>
 #include <optional>
+#include <regex>
 #include <set>
 #include <string>
 #include <tuple>
@@ -1243,13 +1244,23 @@ void P2PTransportChannel::ResolveHostnameCandidate(const Candidate& candidate) {
     return;
   }
 
+  // Only allow resolving of mDNS hostnames with <UUID4>.local to avoid
+  // any leaks.
+  // See: https://github.com/rtcweb-wg/mdns-ice-candidates/issues/121
+  auto hostname = candidate.address().HostAsSensitiveURIString();
+  if (!std::regex_match(hostname, uuid_local_hostname_regex_)) {
+    RTC_LOG(LS_WARNING) << "Dropping non-UUID ICE candidate hostname "
+                        << hostname;
+    return;
+  }
+
   auto resolver = async_dns_resolver_factory_->Create();
   auto resptr = resolver.get();
   resolvers_.emplace_back(candidate, std::move(resolver));
   resptr->Start(candidate.address(),
                 [this, resptr]() { OnCandidateResolved(resptr); });
   RTC_LOG(LS_INFO) << "Asynchronously resolving ICE candidate hostname "
-                   << candidate.address().HostAsSensitiveURIString();
+                   << hostname;
 }
 
 void P2PTransportChannel::AddRemoteCandidate(const Candidate& candidate) {
diff --git a/p2p/base/p2p_transport_channel.h b/p2p/base/p2p_transport_channel.h
index 0e39a82b59..43a267318b 100644
--- a/p2p/base/p2p_transport_channel.h
+++ b/p2p/base/p2p_transport_channel.h
@@ -27,6 +27,7 @@
 #include <map>
 #include <memory>
 #include <optional>
+#include <regex>
 #include <string>
 #include <vector>
 
@@ -491,6 +492,15 @@ class RTC_EXPORT P2PTransportChannel : public IceTransportInternal,
     std::unique_ptr<webrtc::AsyncDnsResolverInterface> resolver_;
   };
   std::vector<CandidateAndResolver> resolvers_ RTC_GUARDED_BY(network_thread_);
+  std::regex uuid_local_hostname_regex_ RTC_GUARDED_BY(network_thread_) =
+      std::regex{
+          "^"
+          "[a-fA-F0-9]{8}-"
+          "[a-fA-F0-9]{4}-"
+          "[a-fA-F0-9]{4}-"
+          "[a-fA-F0-9]{4}-"
+          "[a-fA-F0-9]{12}\\.local"
+          "$"};
   void FinishAddingRemoteCandidate(const Candidate& new_remote_candidate);
   void OnCandidateResolved(webrtc::AsyncDnsResolverInterface* resolver);
   void AddRemoteCandidateWithResult(
