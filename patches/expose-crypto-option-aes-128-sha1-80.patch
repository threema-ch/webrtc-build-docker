diff --git a/sdk/android/api/org/webrtc/CryptoOptions.java b/sdk/android/api/org/webrtc/CryptoOptions.java
index 6e06bc6426..1745babab7 100644
--- a/sdk/android/api/org/webrtc/CryptoOptions.java
+++ b/sdk/android/api/org/webrtc/CryptoOptions.java
@@ -34,6 +34,11 @@ public final class CryptoOptions {
      * other ciphers get preferred.
      */
     private final boolean enableAes128Sha1_32CryptoCipher;
+    /**
+     * If set to true, the crypto cipher SRTP_AES128_CM_SHA1_80 will be
+     * included in the list of supported ciphers during negotiation.
+     */
+    private final boolean enableAes128Sha1_80CryptoCipher;
     /**
      * If set to true, encrypted RTP header extensions as defined in RFC 6904
      * will be negotiated. They will only be used if both peers support them.
@@ -41,9 +46,10 @@ public final class CryptoOptions {
     private final boolean enableEncryptedRtpHeaderExtensions;
 
     private Srtp(boolean enableGcmCryptoSuites, boolean enableAes128Sha1_32CryptoCipher,
-        boolean enableEncryptedRtpHeaderExtensions) {
+        boolean enableAes128Sha1_80CryptoCipher, boolean enableEncryptedRtpHeaderExtensions) {
       this.enableGcmCryptoSuites = enableGcmCryptoSuites;
       this.enableAes128Sha1_32CryptoCipher = enableAes128Sha1_32CryptoCipher;
+      this.enableAes128Sha1_80CryptoCipher = enableAes128Sha1_80CryptoCipher;
       this.enableEncryptedRtpHeaderExtensions = enableEncryptedRtpHeaderExtensions;
     }
 
@@ -57,6 +63,11 @@ public final class CryptoOptions {
       return enableAes128Sha1_32CryptoCipher;
     }
 
+    @CalledByNative("Srtp")
+    public boolean getEnableAes128Sha1_80CryptoCipher() {
+      return enableAes128Sha1_80CryptoCipher;
+    }
+
     @CalledByNative("Srtp")
     public boolean getEnableEncryptedRtpHeaderExtensions() {
       return enableEncryptedRtpHeaderExtensions;
@@ -88,9 +99,10 @@ public final class CryptoOptions {
   private final SFrame sframe;
 
   private CryptoOptions(boolean enableGcmCryptoSuites, boolean enableAes128Sha1_32CryptoCipher,
-      boolean enableEncryptedRtpHeaderExtensions, boolean requireFrameEncryption) {
-    this.srtp = new Srtp(
-        enableGcmCryptoSuites, enableAes128Sha1_32CryptoCipher, enableEncryptedRtpHeaderExtensions);
+      boolean enableAes128Sha1_80CryptoCipher, boolean enableEncryptedRtpHeaderExtensions,
+      boolean requireFrameEncryption) {
+    this.srtp = new Srtp(enableGcmCryptoSuites, enableAes128Sha1_32CryptoCipher,
+        enableAes128Sha1_80CryptoCipher, enableEncryptedRtpHeaderExtensions);
     this.sframe = new SFrame(requireFrameEncryption);
   }
 
@@ -111,6 +123,7 @@ public final class CryptoOptions {
   public static class Builder {
     private boolean enableGcmCryptoSuites;
     private boolean enableAes128Sha1_32CryptoCipher;
+    private boolean enableAes128Sha1_80CryptoCipher;
     private boolean enableEncryptedRtpHeaderExtensions;
     private boolean requireFrameEncryption;
 
@@ -126,6 +139,11 @@ public final class CryptoOptions {
       return this;
     }
 
+    public Builder setEnableAes128Sha1_80CryptoCipher(boolean enableAes128Sha1_80CryptoCipher) {
+      this.enableAes128Sha1_80CryptoCipher = enableAes128Sha1_80CryptoCipher;
+      return this;
+    }
+
     public Builder setEnableEncryptedRtpHeaderExtensions(
         boolean enableEncryptedRtpHeaderExtensions) {
       this.enableEncryptedRtpHeaderExtensions = enableEncryptedRtpHeaderExtensions;
@@ -139,7 +157,8 @@ public final class CryptoOptions {
 
     public CryptoOptions createCryptoOptions() {
       return new CryptoOptions(enableGcmCryptoSuites, enableAes128Sha1_32CryptoCipher,
-          enableEncryptedRtpHeaderExtensions, requireFrameEncryption);
+          enableAes128Sha1_80CryptoCipher, enableEncryptedRtpHeaderExtensions,
+          requireFrameEncryption);
     }
   }
 }
diff --git a/sdk/android/src/jni/pc/crypto_options.cc b/sdk/android/src/jni/pc/crypto_options.cc
index af5f195d98..30cb504f1b 100644
--- a/sdk/android/src/jni/pc/crypto_options.cc
+++ b/sdk/android/src/jni/pc/crypto_options.cc
@@ -32,6 +32,8 @@ absl::optional<CryptoOptions> JavaToNativeOptionalCryptoOptions(
       Java_Srtp_getEnableGcmCryptoSuites(jni, j_srtp);
   native_crypto_options.srtp.enable_aes128_sha1_32_crypto_cipher =
       Java_Srtp_getEnableAes128Sha1_32CryptoCipher(jni, j_srtp);
+  native_crypto_options.srtp.enable_aes128_sha1_80_crypto_cipher =
+      Java_Srtp_getEnableAes128Sha1_80CryptoCipher(jni, j_srtp);
   native_crypto_options.srtp.enable_encrypted_rtp_header_extensions =
       Java_Srtp_getEnableEncryptedRtpHeaderExtensions(jni, j_srtp);
   native_crypto_options.sframe.require_frame_encryption =
diff --git a/sdk/objc/api/peerconnection/RTCConfiguration.mm b/sdk/objc/api/peerconnection/RTCConfiguration.mm
index 8e42cb2a82..e7838b8578 100644
--- a/sdk/objc/api/peerconnection/RTCConfiguration.mm
+++ b/sdk/objc/api/peerconnection/RTCConfiguration.mm
@@ -131,6 +131,8 @@
                                                      .enable_gcm_crypto_suites
              srtpEnableAes128Sha1_32CryptoCipher:config.crypto_options->srtp
                                                      .enable_aes128_sha1_32_crypto_cipher
+             srtpEnableAes128Sha1_80CryptoCipher:config.crypto_options->srtp
+                                                     .enable_aes128_sha1_80_crypto_cipher
           srtpEnableEncryptedRtpHeaderExtensions:config.crypto_options->srtp
                                                      .enable_encrypted_rtp_header_extensions
                     sframeRequireFrameEncryption:config.crypto_options->sframe
diff --git a/sdk/objc/api/peerconnection/RTCCryptoOptions.h b/sdk/objc/api/peerconnection/RTCCryptoOptions.h
index 7894c8d50c..dfd76d1f78 100644
--- a/sdk/objc/api/peerconnection/RTCCryptoOptions.h
+++ b/sdk/objc/api/peerconnection/RTCCryptoOptions.h
@@ -33,6 +33,11 @@ RTC_OBJC_EXPORT
  * other ciphers get preferred.
  */
 @property(nonatomic, assign) BOOL srtpEnableAes128Sha1_32CryptoCipher;
+/**
+ * If set to true, the crypto cipher SRTP_AES128_CM_SHA1_80 will be included in
+ * the list of supported ciphers during negotiation.
+ */
+@property(nonatomic, assign) BOOL srtpEnableAes128Sha1_80CryptoCipher;
 /**
  * If set to true, encrypted RTP header extensions as defined in RFC 6904
  * will be negotiated. They will only be used if both peers support them.
@@ -52,6 +57,7 @@ RTC_OBJC_EXPORT
  */
 - (instancetype)initWithSrtpEnableGcmCryptoSuites:(BOOL)srtpEnableGcmCryptoSuites
               srtpEnableAes128Sha1_32CryptoCipher:(BOOL)srtpEnableAes128Sha1_32CryptoCipher
+              srtpEnableAes128Sha1_80CryptoCipher:(BOOL)srtpEnableAes128Sha1_80CryptoCipher
            srtpEnableEncryptedRtpHeaderExtensions:(BOOL)srtpEnableEncryptedRtpHeaderExtensions
                      sframeRequireFrameEncryption:(BOOL)sframeRequireFrameEncryption
     NS_DESIGNATED_INITIALIZER;
diff --git a/sdk/objc/api/peerconnection/RTCCryptoOptions.mm b/sdk/objc/api/peerconnection/RTCCryptoOptions.mm
index fbaa1de58d..3813b7e0fd 100644
--- a/sdk/objc/api/peerconnection/RTCCryptoOptions.mm
+++ b/sdk/objc/api/peerconnection/RTCCryptoOptions.mm
@@ -14,16 +14,19 @@
 
 @synthesize srtpEnableGcmCryptoSuites = _srtpEnableGcmCryptoSuites;
 @synthesize srtpEnableAes128Sha1_32CryptoCipher = _srtpEnableAes128Sha1_32CryptoCipher;
+@synthesize srtpEnableAes128Sha1_80CryptoCipher = _srtpEnableAes128Sha1_80CryptoCipher;
 @synthesize srtpEnableEncryptedRtpHeaderExtensions = _srtpEnableEncryptedRtpHeaderExtensions;
 @synthesize sframeRequireFrameEncryption = _sframeRequireFrameEncryption;
 
 - (instancetype)initWithSrtpEnableGcmCryptoSuites:(BOOL)srtpEnableGcmCryptoSuites
               srtpEnableAes128Sha1_32CryptoCipher:(BOOL)srtpEnableAes128Sha1_32CryptoCipher
+              srtpEnableAes128Sha1_80CryptoCipher:(BOOL)srtpEnableAes128Sha1_80CryptoCipher
            srtpEnableEncryptedRtpHeaderExtensions:(BOOL)srtpEnableEncryptedRtpHeaderExtensions
                      sframeRequireFrameEncryption:(BOOL)sframeRequireFrameEncryption {
   if (self = [super init]) {
     _srtpEnableGcmCryptoSuites = srtpEnableGcmCryptoSuites;
     _srtpEnableAes128Sha1_32CryptoCipher = srtpEnableAes128Sha1_32CryptoCipher;
+    _srtpEnableAes128Sha1_80CryptoCipher = srtpEnableAes128Sha1_80CryptoCipher;
     _srtpEnableEncryptedRtpHeaderExtensions = srtpEnableEncryptedRtpHeaderExtensions;
     _sframeRequireFrameEncryption = sframeRequireFrameEncryption;
   }
