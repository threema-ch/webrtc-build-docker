diff --git a/media/engine/webrtc_voice_engine.cc b/media/engine/webrtc_voice_engine.cc
index a7568696db..670db725ff 100644
--- a/media/engine/webrtc_voice_engine.cc
+++ b/media/engine/webrtc_voice_engine.cc
@@ -368,13 +368,6 @@ std::vector<Codec> LegacyCollectCodecs(
   webrtc::PayloadTypePicker pt_mapper;
   std::vector<Codec> out;
 
-  // Only generate CN payload types for these clockrates:
-  std::map<int, bool, std::greater<int>> generate_cn = {
-      {8000, false}, {16000, false}, {32000, false}};
-  // Only generate telephone-event payload types for these clockrates:
-  std::map<int, bool, std::greater<int>> generate_dtmf = {
-      {8000, false}, {16000, false}, {32000, false}, {48000, false}};
-
   for (const auto& spec : specs) {
     cricket::Codec codec = CreateAudioCodec(spec.format);
     if (allocate_pt) {
@@ -390,21 +383,6 @@ std::vector<Codec> LegacyCollectCodecs(
           FeedbackParam(kRtcpFbParamTransportCc, kParamValueEmpty));
     }
 
-    if (spec.info.allow_comfort_noise) {
-      // Generate a CN entry if the decoder allows it and we support the
-      // clockrate.
-      auto cn = generate_cn.find(spec.format.clockrate_hz);
-      if (cn != generate_cn.end()) {
-        cn->second = true;
-      }
-    }
-
-    // Generate a telephone-event entry if we support the clockrate.
-    auto dtmf = generate_dtmf.find(spec.format.clockrate_hz);
-    if (dtmf != generate_dtmf.end()) {
-      dtmf->second = true;
-    }
-
     out.push_back(codec);
 
     // TODO(hta):  Don't assign RED codecs until we know that the PT for Opus
@@ -426,28 +404,6 @@ std::vector<Codec> LegacyCollectCodecs(
     }
   }
 
-  // Add CN codecs after "proper" audio codecs.
-  for (const auto& cn : generate_cn) {
-    if (cn.second) {
-      cricket::Codec cn_codec = CreateAudioCodec({kCnCodecName, cn.first, 1});
-      if (allocate_pt) {
-        cn_codec.id = pt_mapper.SuggestMapping(cn_codec, nullptr).value();
-      }
-      out.push_back(cn_codec);
-    }
-  }
-
-  // Add telephone-event codecs last.
-  for (const auto& dtmf : generate_dtmf) {
-    if (dtmf.second) {
-      cricket::Codec dtmf_codec =
-          CreateAudioCodec({kDtmfCodecName, dtmf.first, 1});
-      if (allocate_pt) {
-        dtmf_codec.id = pt_mapper.SuggestMapping(dtmf_codec, nullptr).value();
-      }
-      out.push_back(dtmf_codec);
-    }
-  }
   return out;
 }
 
@@ -1418,20 +1374,6 @@ bool WebRtcVoiceSendChannel::SetSendCodecs(
     }
   }
 
-  // Find PT of telephone-event codec with lowest clockrate, as a fallback, in
-  // case we don't have a DTMF codec with a rate matching the send codec's, or
-  // if this function returns early.
-  std::vector<Codec> dtmf_codecs;
-  for (const Codec& codec : codecs) {
-    if (IsCodec(codec, kDtmfCodecName)) {
-      dtmf_codecs.push_back(codec);
-      if (!dtmf_payload_type_ || codec.clockrate < dtmf_payload_freq_) {
-        dtmf_payload_type_ = codec.id;
-        dtmf_payload_freq_ = codec.clockrate;
-      }
-    }
-  }
-
   // Scan through the list to figure out the codec to use for sending.
   std::optional<webrtc::AudioSendStream::Config::SendCodecSpec> send_codec_spec;
   webrtc::BitrateConstraints bitrate_config;
@@ -1471,36 +1413,6 @@ bool WebRtcVoiceSendChannel::SetSendCodecs(
   }
 
   RTC_DCHECK(voice_codec_info);
-  if (voice_codec_info->allow_comfort_noise) {
-    // Loop through the codecs list again to find the CN codec.
-    // TODO(solenberg): Break out into a separate function?
-    for (const Codec& cn_codec : codecs) {
-      if (IsCodec(cn_codec, kCnCodecName) &&
-          cn_codec.clockrate == send_codec_spec->format.clockrate_hz &&
-          cn_codec.channels == voice_codec_info->num_channels) {
-        if (cn_codec.channels != 1) {
-          RTC_LOG(LS_WARNING)
-              << "CN #channels " << cn_codec.channels << " not supported.";
-        } else if (cn_codec.clockrate != 8000 && cn_codec.clockrate != 16000 &&
-                   cn_codec.clockrate != 32000) {
-          RTC_LOG(LS_WARNING)
-              << "CN frequency " << cn_codec.clockrate << " not supported.";
-        } else {
-          send_codec_spec->cng_payload_type = cn_codec.id;
-        }
-        break;
-      }
-    }
-
-    // Find the telephone-event PT exactly matching the preferred send codec.
-    for (const Codec& dtmf_codec : dtmf_codecs) {
-      if (dtmf_codec.clockrate == send_codec_spec->format.clockrate_hz) {
-        dtmf_payload_type_ = dtmf_codec.id;
-        dtmf_payload_freq_ = dtmf_codec.clockrate;
-        break;
-      }
-    }
-  }
 
   // Loop through the codecs to find the RED codec that matches opus
   // with respect to clockrate and number of channels.
diff --git a/sdk/android/api/org/webrtc/RtpSender.java b/sdk/android/api/org/webrtc/RtpSender.java
index de0781e2e7..adeefbe20c 100644
--- a/sdk/android/api/org/webrtc/RtpSender.java
+++ b/sdk/android/api/org/webrtc/RtpSender.java
@@ -28,12 +28,7 @@ public class RtpSender {
     long nativeTrack = nativeGetTrack(nativeRtpSender);
     cachedTrack = MediaStreamTrack.createMediaStreamTrack(nativeTrack);
 
-    if (nativeGetMediaType(nativeRtpSender).equalsIgnoreCase(MediaStreamTrack.AUDIO_TRACK_KIND)) {
-      long nativeDtmfSender = nativeGetDtmfSender(nativeRtpSender);
-      dtmfSender = (nativeDtmfSender != 0) ? new DtmfSender(nativeDtmfSender) : null;
-    } else {
-      dtmfSender = null;
-    }
+    dtmfSender = null;
   }
 
   /**
diff --git a/sdk/objc/api/peerconnection/RTCRtpSender.mm b/sdk/objc/api/peerconnection/RTCRtpSender.mm
index 08ab9ed404..acece122f6 100644
--- a/sdk/objc/api/peerconnection/RTCRtpSender.mm
+++ b/sdk/objc/api/peerconnection/RTCRtpSender.mm
@@ -128,14 +128,6 @@
   if (self) {
     _factory = factory;
     _nativeRtpSender = nativeRtpSender;
-    if (_nativeRtpSender->media_type() == cricket::MEDIA_TYPE_AUDIO) {
-      rtc::scoped_refptr<webrtc::DtmfSenderInterface> nativeDtmfSender(
-          _nativeRtpSender->GetDtmfSender());
-      if (nativeDtmfSender) {
-        _dtmfSender = [[RTC_OBJC_TYPE(RTCDtmfSender) alloc]
-            initWithNativeDtmfSender:nativeDtmfSender];
-      }
-    }
     RTCLogInfo(@"RTC_OBJC_TYPE(RTCRtpSender)(%p): created sender: %@",
                self,
                self.description);
