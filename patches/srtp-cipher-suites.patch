diff --git a/api/crypto/crypto_options.cc b/api/crypto/crypto_options.cc
index 22c5dd464b..d6840f9bbb 100644
--- a/api/crypto/crypto_options.cc
+++ b/api/crypto/crypto_options.cc
@@ -32,25 +32,21 @@ CryptoOptions CryptoOptions::NoGcm() {
 
 std::vector<int> CryptoOptions::GetSupportedDtlsSrtpCryptoSuites() const {
   std::vector<int> crypto_suites;
-  // Note: kSrtpAes128CmSha1_80 is what is required to be supported (by
-  // draft-ietf-rtcweb-security-arch), but kSrtpAes128CmSha1_32 is allowed as
-  // well, and saves a few bytes per packet if it ends up selected.
-  // As the cipher suite is potentially insecure, it will only be used if
-  // enabled by both peers.
-  if (srtp.enable_aes128_sha1_32_crypto_cipher) {
-    crypto_suites.push_back(rtc::kSrtpAes128CmSha1_32);
+  // We want to prefer GCM cipher suites even though they increase the packet
+  // size.
+  if (srtp.enable_gcm_crypto_suites) {
+    crypto_suites.push_back(rtc::kSrtpAeadAes256Gcm);
+    crypto_suites.push_back(rtc::kSrtpAeadAes128Gcm);
   }
+
+  // Note: kSrtpAes128CmSha1_80 is what is required to be supported (by
+  // draft-ietf-rtcweb-security-arch).
+  // kSrtpAes128CmSha1_32 is a joke, so we won't even consider it,
+  // regardless of the boolean option.
   if (srtp.enable_aes128_sha1_80_crypto_cipher) {
     crypto_suites.push_back(rtc::kSrtpAes128CmSha1_80);
   }
 
-  // Note: GCM cipher suites are not the top choice since they increase the
-  // packet size. In order to negotiate them the other side must not support
-  // kSrtpAes128CmSha1_80.
-  if (srtp.enable_gcm_crypto_suites) {
-    crypto_suites.push_back(rtc::kSrtpAeadAes256Gcm);
-    crypto_suites.push_back(rtc::kSrtpAeadAes128Gcm);
-  }
   RTC_CHECK(!crypto_suites.empty());
   return crypto_suites;
 }
diff --git a/rtc_base/openssl_stream_adapter.cc b/rtc_base/openssl_stream_adapter.cc
index 9fd8c8f395..f414cdd35b 100644
--- a/rtc_base/openssl_stream_adapter.cc
+++ b/rtc_base/openssl_stream_adapter.cc
@@ -77,10 +77,9 @@ struct SslCipherMapEntry {
 
 // This isn't elegant, but it's better than an external reference
 constexpr SrtpCipherMapEntry kSrtpCipherMap[] = {
-    {"SRTP_AES128_CM_SHA1_80", kSrtpAes128CmSha1_80},
-    {"SRTP_AES128_CM_SHA1_32", kSrtpAes128CmSha1_32},
+    {"SRTP_AEAD_AES_256_GCM", kSrtpAeadAes256Gcm},
     {"SRTP_AEAD_AES_128_GCM", kSrtpAeadAes128Gcm},
-    {"SRTP_AEAD_AES_256_GCM", kSrtpAeadAes256Gcm}};
+    {"SRTP_AES128_CM_SHA1_80", kSrtpAes128CmSha1_80}};
 
 #ifndef OPENSSL_IS_BORINGSSL
 // The "SSL_CIPHER_standard_name" function is only available in OpenSSL when
